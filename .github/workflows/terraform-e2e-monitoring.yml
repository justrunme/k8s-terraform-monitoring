name: Terraform E2E Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind & Kubectl
        run: |
          curl -LO "https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64"
          sudo install -m 0755 kind-linux-amd64 /usr/local/bin/kind
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          sudo install -m 0755 kubectl /usr/local/bin/kubectl

      - name: Create Kind Cluster
        run: kind create cluster --wait 60s

      - name: Wait for Cluster DNS (CoreDNS)
        run: kubectl rollout status deployment/coredns -n kube-system --timeout=90s

      - name: Prepare hostPath for PV (Kind)
        run: |
          docker exec kind-control-plane mkdir -p /tmp/demo-data
          docker exec kind-control-plane chmod 777 /tmp/demo-data

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Apply (Helm ONLY)
        run: terraform apply -auto-approve -target=helm_release.kube_prometheus_stack

      - name: Wait for ServiceMonitor CRD
        run: |
          for i in {1..30}; do
            kubectl get crd servicemonitors.monitoring.coreos.com && exit 0
            echo "Waiting for ServiceMonitor CRD..."
            sleep 5
          done
          echo "CRD ServiceMonitor not found after timeout!" >&2
          exit 1

      - name: Terraform Apply (ALL)
        run: terraform apply -auto-approve

      - name: Wait for Monitoring Namespace
        run: for i in {1..30}; do kubectl get ns monitoring && break || sleep 4; done

      - name: Wait for test-app Pod
        run: |
          kubectl rollout status deployment/test-app -n monitoring --timeout=120s

      - name: PVC Bound Test (if used)
        run: |
          kubectl get pvc || echo "No PVCs in monitoring ns"

      - name: Check test-app Service
        run: |
          kubectl get svc test-app -n monitoring

      - name: Port-Forward & cURL Test (test-app)
        run: |
          kubectl port-forward svc/test-app 8080:9100 -n monitoring &
          sleep 5
          curl -sf http://localhost:8080/metrics | grep "node_exporter_build_info" || (echo "No node-exporter metrics" && exit 1)

      - name: Port-forward Grafana & check login page
        run: |
          GRAFANA_SVC=$(kubectl get svc -n monitoring -o name | grep grafana)
          kubectl port-forward -n monitoring $GRAFANA_SVC 30090:3000 &
          sleep 10
          curl -sf http://localhost:30090/login | grep "grafana" || (echo "No Grafana login page" && exit 1)

      - name: Check test-app Service Endpoints
        run: |
          echo "--- test-app Service Endpoints ---"
          kubectl get endpoints test-app -n monitoring -o yaml

      - name: Get Prometheus Operator Pod Logs
        run: |
          echo "--- Prometheus Operator Pod Logs ---"
          PROM_OPERATOR_POD=$(kubectl get pods -n monitoring -l app.kubernetes.io/name=prometheus-operator -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $PROM_OPERATOR_POD -n monitoring

      - name: Prometheus Targets available
        run: |
          echo "test"

      # --------------------- Cleanup -------------------------
      - name: Terraform Destroy
        if: ${{ always() }}
        run: terraform destroy -auto-approve || true

      - name: Delete Kind Cluster
        if: ${{ always() }}
        run: kind delete cluster || true

